<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黑白小屋漂流记</title>
  
  <subtitle>学习、记录、总结、提升</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hbzshome.com/"/>
  <updated>2018-02-03T06:09:51.012Z</updated>
  <id>http://blog.hbzshome.com/</id>
  
  <author>
    <name>黑白之上</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《深入浅出 Webpack》读书笔记</title>
    <link href="http://blog.hbzshome.com/2017/12/21/head-first-webpack-notebook/"/>
    <id>http://blog.hbzshome.com/2017/12/21/head-first-webpack-notebook/</id>
    <published>2017-12-21T15:59:22.358Z</published>
    <updated>2018-02-03T06:09:51.012Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📚🔗：<a href="http://webpack.wuhaolin.cn/" target="_blank" rel="noopener">深入浅出 Webpack</a></p></blockquote><ul><li>Webpack 是目前最流行的<strong>前端构建工具</strong></li><li>按照入门、配置、实战、优化和原理的路线学习</li><li>编写时：迭代到 3.8.1，笔记时：最新稳定版本 3.10.0，预览版本 4.0.0-beta.0</li></ul><p>&lt;!— 阅读全文 —&gt;</p><h2 id="前端的发展"><a href="#前端的发展" class="headerlink" title="前端的发展"></a>前端的发展</h2><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul><li>把一个复杂的系统分解到多个模块以方便编码</li><li>以前是通过命名空间方式组织代码。缺点<ul><li>命名空间冲突（jQuery 库和 Zepto 库均被放在 <code>windows.$</code> 下）</li><li>无法合理地管理项目的依赖和版本</li><li>无法方便地控制依赖的加载顺序</li></ul></li></ul><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><ul><li><p>使用广泛的 JavaScript 模块化规范</p><ul><li>得益于 Node.js 采用了这种方式</li></ul></li><li><p>核心思想</p><ul><li><code>require</code> 方法同步加载的其他模块</li><li><code>module.exports</code> 导出需要暴露的接口</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'./moduleA'</span>);</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = moduleA.someFunc;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>可复用于 Node.js 环境下运行，例如做「同构应用」<ul><li>同构的意义就在于任何一段代码（当然有些特殊代码例外）都能同时跑在客户端与服务器端</li></ul></li><li>通过 NPM 发布的很多第三方模块都采用了此规范</li></ul></li><li><p>缺点：无法直接运行在浏览器环境下，必须通过工具转换为标准的 ES5</p></li></ul><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><ul><li><p>也是一种 JavaScript 模块化规范</p></li><li><p>（与 CommonJS 最大的不同是）采用<strong>异步</strong>的方式去加载依赖的模块</p></li><li><p>主要是为了解决针对浏览器环境的模块化问题</p><ul><li>最具代表性的实现是 requirejs</li></ul></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个模块</span></span><br><span class="line">define(<span class="string">'module'</span>, [<span class="string">'dep'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">dep</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> exports;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 导入和使用</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'module'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>可在不转换代码的情况下直接在浏览器中运行</li><li>可异步加载依赖</li><li>可并行加载多个依赖</li><li>代码可运行在浏览器环境和 Node.js 环境下</li></ul></li><li><p>缺点：无原生支持，需先导入实现了 AMD 的库</p></li></ul><h4 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h4><ul><li><p>语言层面上实现了模块化</p></li><li><p>代码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFile &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>缺点：「目前」无法直接运行在大部分 JavaScript 运行环境下，需转换为 ES5</p><ul><li>注：现在的浏览器支持 - <a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">ECMAScript 6 compatibility table</a></li></ul></li></ul><h4 id="样式文件中的模块化"><a href="#样式文件中的模块化" class="headerlink" title="样式文件中的模块化"></a>样式文件中的模块化</h4><ul><li>SCSS 中的 <code>@import</code> </li></ul><h3 id="新框架"><a href="#新框架" class="headerlink" title="新框架"></a>新框架</h3><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul><li>引入 JSX 语法到 JavaScript 语言层面，以更灵活地控制视图的渲染逻辑</li><li>无法直接运行，必须经过转换</li></ul><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><ul><li>把一个组件相关的 HTML 模版、JavaScript 逻辑代码、CSS 样式代码都写在一个文件里</li><li>非常直观</li></ul><h4 id="Angular2"><a href="#Angular2" class="headerlink" title="Angular2"></a>Angular2</h4><ul><li>推崇采用 TypeScript 语言去开发应用</li><li>通过注解的语法描述组件的各种属性</li></ul><h3 id="新语言"><a href="#新语言" class="headerlink" title="新语言"></a>新语言</h3><ul><li>可以提升编码效率</li><li>必须把源代码转换成可以直接在浏览器环境下运行的代码</li></ul><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ul><li>ECMAScript 6.0（简称 ES6）</li><li>JavaScript 语言的下一代标准</li><li>语言层面为 JavaScript 引入了很多新语法和 API ，使得 JavaScript 语言可以用来编写复杂的大型应用程序</li><li>例如<ul><li>规范模块化</li><li>Class 语法</li><li>用 <code>let</code> 声明代码块内有效的变量 ，用 <code>const</code> 声明常量</li><li>箭头函数</li><li>async 函数</li><li>Set 和 Map 数据结构</li></ul></li><li>Babel：为了解决兼容性问题，需要把 ES6 代码转换成 ES5 代码</li></ul><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><ul><li>JavaScript 的一个超集</li><li>支持 ES6 的所有功能</li><li>提供了静态类型检查<ul><li>在编译阶段找出可能存在的问题</li></ul></li><li>缺点<ul><li>相对于 JavaScript 更加啰嗦</li><li>无法直接运行在浏览器或 Node.js 环境下</li></ul></li></ul><h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><ul><li>JavaScript 的一个超集</li><li>提供静态类型检查<ul><li>（和 TypeScript 相似但更灵活）可以让你只在需要的地方加上类型检查</li></ul></li></ul><h4 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h4><ul><li>CSS 预处理器</li><li>优点<ul><li>方便地管理代码</li><li>抽离公共的部分，通过逻辑写出更灵活的代码</li><li>类似：LESS</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📚🔗：&lt;a href=&quot;http://webpack.wuhaolin.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入浅出 Webpack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Webpac
      
    
    </summary>
    
      <category term="Web" scheme="http://blog.hbzshome.com/categories/Web/"/>
    
      <category term="Webpack" scheme="http://blog.hbzshome.com/categories/Web/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://blog.hbzshome.com/tags/Webpack/"/>
    
      <category term="读书笔记" scheme="http://blog.hbzshome.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
